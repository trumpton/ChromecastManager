#!/usr/bin/perl
#
# play.pl.sample
#
# Sample perl preprocess
#
# Parses: { "textfield": "[sound] on [device]" }
# into: { "device": "[device]", "localplaylist": "preset[n]" }
# or:   { "device": "[device]", "localplaylist": "channel[n]" }
# or:   { "device": "[device]", "playlist": "http://mediaserver/search.pl?q=[query]" }
#

#############################################################
#
# Custom Settings
#

my $SEARCH = "http://192.168.1.100/search.pl?q=" ;
my $DEFAULTDEVICE = "all speakers" ;

#############################################################

use 5.010 ;
use File::Basename;
use Cwd qw(abs_path);
use Data::Dumper;
use URI::Encode ;

##############################
#
# Execute Sequence
#

my $request ;

if ( $ARGV[0] =~ /GET/ ) {
  ($request) = ( $ARGV[1] =~ /.*textfield=(.*)$/g ) ;
} else {
  my $body = readbody() ;
  ($request) = ( $body =~ /.*["']textfield["'] *: *["'](.*)["']/g ) ;
}

my $output = process($request) ;

print $output ;
exit 0 ;


##############################
#
# Process and generate output
#

sub process {

	# Parse passed parameters - extract textfield

	my ($request) = @_ ;
        my $uri = URI::Encode->new( {encode_reserved => 0 } ) ;
        my $textfield=lc($uri->decode($request)) ;

	# Log request to syslog

	print STDERR "request = $request\n" ;

	# Parse textfield request

        my ($query,$device) = 
          $textfield =~ /^(.*)\W+on\W+(.*)/ix ;

        if ( $device eq "" ) {
          $query = $textfield ;
          $device = $DEFAULTDEVICE ;
        }

        # Check for channel / preset
        my ( $chanpre, $num ) =
          $query =~ /(channel|preset)\W+([^\W]*)/ix ;

        my $response ;

        if ( $chanpre eq "channel" || $chanpre eq "preset" ) {

          $num = convertnumber($num) ;

          $response = "{\n" .
                      "  \"textfield\": \"$textfield\",\n" .
                      "  \"device\": \"$device\",\n" .
                      "  \"localplaylist\": \"$chanpre$num\"\n" .
                      "}" ;
 
        } else {

          $query =~ s/\W//g ;

	  $response = "{\n" .
                      "  \"textfield\": \"$textfield\",\n" .
                      "  \"device\": \"$device\",\n" .
                      "  \"playlist\": \"$SEARCH$query\"\n" . 
                      "}" ;
        }

	return $response ;
}


##############################
#
# Convert text to number
#

sub convertnumber {

  my @substitutions = (
    [ "one", "1" ],
    [ "two", "2" ], [ "to", "2" ], [ "too", "2" ],
    [ "three", "3" ],
    [ "four", "4" ], [ "fore", "4" ],
    [ "five", "5" ], [ "six", "6" ],
    [ "seven", "7" ], [ "eight", "8" ],
    [ "ate", "8" ], [ "nine", "9" ],
    [ "ten", "10" ], [ "eleven", "11" ],
    [ "twelve" , "12" ], [ "thirteen", "13" ],
    [ "fourteen", "14" ], [ "fifteen", "15" ],
    [ "sixteen", "16" ], [ "seventeen", "17" ],
    [ "eighteen", "18" ], [ "nineteen", "19" ],
    [ "twenty", "20" ], [ "thirty", "30" ],
    [ "fourty", "40" ], [ "fifty", "50" ],
    [ "sixty", "60" ], [ "seventy", "70" ],
    [ "eighty", "80" ], [ "ninety", "90" ] ) ;

  my ($txt) = @_ ;
  my $l = scalar @substitutions ;
  for my $i (0..$l) {
    my $tst = $substitutions[$i][0] ;
    my $is = $substitutions[$i][1] ;
    if ( $txt eq $tst ) {
      $txt = $is ;
    }
  }
  return $txt + 0 ;
}


##############################
#
# Read data from stdin
#

sub readbody()
{
  my $body="" ;
  while (my $line = <STDIN>) {
    chomp $line ;
    $body = $body . $line . "\n";
  }
  return $body;
}

