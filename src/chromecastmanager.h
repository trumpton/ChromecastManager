//
// chromecastmanager.h
//
//

#ifndef _CHROMECAST_MANAGER_DEFINED_
#define _CHROMECAST_MANAGER_DEFINED_

#include "libtools/httpd.h"
#include "chromecast_interface.h"


////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//
// chromecastmanager.c
//
//

char *getscriptfolder() ;


////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//
// chromecastmanager_device_connection.c
//
// This function manages the MDNS device list and the chromecast
// connection device list and opens / closes connections as required
// so as to maintain a working active control / status connection to
// each chromecast device.
//

int chromecast_device_connection_update(CHROMECAST **cclist, int maxcc) ;





////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//
// chromecastmanager_device_response.c
//
// This function processes response messages from all / each 
// active chromecast device, and if pending, forwards the response
// to the current http connection.
// The function also handles background tasks such as responding to
// PING messages.
//

int chromecast_device_response_process(CHROMECAST *cch, HTTPD *httpsh, DATAOBJECT *sysvars) ;





////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//
// chromecastmanager_devicerequest.c
//
// These functions handle requests from the http server, and
// return the requested built-in file, or processes the request
// sending data to the required chromecast device and providing 
// a response.  Responses from the chromecast devices are handled
// in the chromecastmanager_deviceresponse function, above.
// The response handler function _may_ call the 
//   chromecast_device_request_process_command_completion function
// if further commading action is required to complete the 
// request / task.
//

/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
// @brief Process http request
// Returns index of device processed or -1
//

int chromecast_device_request_process(HTTPD *httpsh, CHROMECAST **cclist, int maxcc, DATAOBJECT *sysvars) ;


/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
// @brief Process Device List
// Returns true

int chromecast_device_request_process_devicelist(HTTPD *httpsh, CHROMECAST **cclist, int maxcc) ;


/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
// @brief Process Server Info
// Returns true

int chromecast_device_request_process_serverinfo(HTTPD *httpsh, DATAOBJECT *sysvars) ;

/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
// @brief Process Chromecast JSON Query
// Returns true

int chromecast_device_request_process_jsonquery(HTTPD *httpsh, CHROMECAST *cch, DATAOBJECT *sessionvars, DATAOBJECT *sysvars) ;


/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
// @brief Load Macro
// @param(in) httpdsh handle of HTTP session which initiated request
// @param(in) cch Chromecast device handle
// @return True on success
//

int chromecast_macro_load(HTTPD *httpsh, CHROMECAST *cch, char *macro, DATAOBJECT *sysvars) ;


/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
// @brief Process Macro
// @return true whilst processing and false on completion / error

int chromecast_macro_process(HTTPD *httpsh, CHROMECAST *cch, DATAOBJECT *sysvars) ;



////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//
// chromecastmanager.c
//

/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
// @brief Find device friendlyname in mdns list
// @return index of device or -1
//

int chromecast_finddevice(char *device, int maxcc) ;

#endif


